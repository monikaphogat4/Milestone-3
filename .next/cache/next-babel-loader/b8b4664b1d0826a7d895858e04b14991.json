{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/m0p024f/WebstormProjects/Milestone 3/components/Sections.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n    sections {\\n      name\\n      text\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"apollo-boost\";\nimport { useQuery, Query } from \"react-apollo\";\nvar SECTION_DETAILS = gql(_templateObject()); // interface SectionType {\n//   data: object[]\n// }\n// const linksToRender = [\n//   {\n//     \"name\": \"Prisma turns your database into a GraphQL API \",\n//     \"text\": \"https://www.prismagraphql.com\",\n//   },\n//   {\n//     \"name\": \"The best GraphQL client\",\n//     \"text\": \"ttps://www.apollographql.com/docs/react/\",\n//   },\n// ]\n\nvar SectionDetails = function SectionDetails(_ref) {\n  _s();\n\n  var sections = _ref.sections;\n\n  var _useQuery = useQuery(SECTION_DETAILS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 22\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 20\n    }\n  }, \"On ho\");\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, data.section.name); // displaySections() {\n  //     var data = this.props.data;\n  //     // if(data.loading){\n  //     //     return( <div>Loading sections</div> );\n  //     // } \n  //     // else {\n  //     //     return data.sections.map(section => {\n  //     //         return( <li key={section.id}>{ section.name }</li> );\n  //     //     });\n  //     // }\n  // }\n\n  return __jsx(Query, {\n    query: SECTION_DETAILS,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  });\n}; // <div>\n//   {linksToRender.map((section) => <div key={section.name}>{section.name}</div>)}\n// </div>\n// {/* <ul id=\"sections-list\">\n//     {/* {this.displaySections()} */}\n//   </ul> */}\n//     );\n//   }\n// }\n// export default graphql(SECTION_DETAILS)(SectionDetails);\n\n\n_s(SectionDetails, \"ATRudwUnWENk7lEGiyv3yjumjxE=\", false, function () {\n  return [useQuery];\n});\n\n_c = SectionDetails;\nexport default SectionDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"SectionDetails\");","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/components/Sections.tsx"],"names":["gql","useQuery","Query","SECTION_DETAILS","SectionDetails","sections","loading","error","data","section","name"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAAkBC,QAAlB,EAA4BC,KAA5B,QAAyC,cAAzC;AAGA,IAAMC,eAAe,GAAGH,GAAH,mBAArB,C,CASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,OAAgB;AAAA;;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAAA,kBACNJ,QAAQ,CAACE,eAAD,CADF;AAAA,MAC9BG,OAD8B,aAC9BA,OAD8B;AAAA,MACrBC,KADqB,aACrBA,KADqB;AAAA,MACdC,IADc,aACdA,IADc;;AAGrC,MAAGF,OAAH,EAAY,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACZ,MAAGC,KAAH,EAAU,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AAEV,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,OAAL,CAAaC,IADhB,CADF,CANqC,CAWrC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGE,SACE,MAAC,KAAD;AAAO,IAAA,KAAK,EAAEP,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKC,CA9BL,C,CAgCM;AACA;AAEA;AACA;AACA;AAEA;AACN;AACA;AACA;AAEA;;;GA5CMC,c;UAC2BH,Q;;;KAD3BG,c;AA6CN,eAAeA,cAAf","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { graphql, useQuery, Query } from \"react-apollo\";\nimport { Component } from \"react\";\n\nconst SECTION_DETAILS = gql`\n{\n    sections {\n      name\n      text\n  }\n}\n`;\n\n// interface SectionType {\n//   data: object[]\n\n// }\n// const linksToRender = [\n//   {\n//     \"name\": \"Prisma turns your database into a GraphQL API \",\n//     \"text\": \"https://www.prismagraphql.com\",\n//   },\n//   {\n//     \"name\": \"The best GraphQL client\",\n//     \"text\": \"ttps://www.apollographql.com/docs/react/\",\n//   },\n// ]\n\nconst SectionDetails = ({sections}) => {\n  const {loading, error, data} = useQuery(SECTION_DETAILS)\n\n  if(loading) return <div>Loading...</div>\n  if(error) return <div>On ho</div>\n\n  return (\n    <div>\n      {data.section.name}\n    </div>\n  )\n  // displaySections() {\n  //     var data = this.props.data;\n\n  //     // if(data.loading){\n  //     //     return( <div>Loading sections</div> );\n  //     // } \n  //     // else {\n  //     //     return data.sections.map(section => {\n  //     //         return( <li key={section.id}>{ section.name }</li> );\n  //     //     });\n  //     // }\n  // }\n\n\n    return (\n      <Query query={SECTION_DETAILS}>\n    \n      </Query>\n    )\n    }\n      \n      // <div>\n      //   {linksToRender.map((section) => <div key={section.name}>{section.name}</div>)}\n        \n      // </div>\n      // {/* <ul id=\"sections-list\">\n      //     {/* {this.displaySections()} */}\n          \n      //   </ul> */}\n//     );\n//   }\n// }\n\n// export default graphql(SECTION_DETAILS)(SectionDetails);\nexport default SectionDetails;\n"]},"metadata":{},"sourceType":"module"}