{"ast":null,"code":"var _jsxFileName = \"/Users/m0p024f/WebstormProjects/Milestone 3/components/Sections.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"react-apollo\";\nconst SECTION_DETAILS = gql`\n{\n    sections {\n      name\n      text\n  }\n}\n`; // interface SectionType {\n//   data: object[]\n// }\n// const linksToRender = [\n//   {\n//     \"name\": \"Prisma turns your database into a GraphQL API \",\n//     \"text\": \"https://www.prismagraphql.com\",\n//   },\n//   {\n//     \"name\": \"The best GraphQL client\",\n//     \"text\": \"ttps://www.apollographql.com/docs/react/\",\n//   },\n// ]\n\nconst SectionDetails = ({\n  sections\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SECTION_DETAILS);\n  if (loading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 22\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 20\n    }\n  }, \"On ho\");\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, data.section.name); // displaySections() {\n  //     var data = this.props.data;\n  //     // if(data.loading){\n  //     //     return( <div>Loading sections</div> );\n  //     // } \n  //     // else {\n  //     //     return data.sections.map(section => {\n  //     //         return( <li key={section.id}>{ section.name }</li> );\n  //     //     });\n  //     // }\n  // }\n  // return (\n  //   <Query query={SECTION_DETAILS}>\n  //   </Query>\n  // )\n}; // <div>\n//   {linksToRender.map((section) => <div key={section.name}>{section.name}</div>)}\n// </div>\n// {/* <ul id=\"sections-list\">\n//     {/* {this.displaySections()} */}\n//   </ul> */}\n//     );\n//   }\n// }\n// export default graphql(SECTION_DETAILS)(SectionDetails);\n\n\nexport default SectionDetails;","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/components/Sections.tsx"],"names":["gql","useQuery","SECTION_DETAILS","SectionDetails","sections","loading","error","data","section","name"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAAkBC,QAAlB,QAAyC,cAAzC;AAGA,MAAMC,eAAe,GAAGF,GAAI;;;;;;;CAA5B,C,CASA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACrC,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBN,QAAQ,CAACC,eAAD,CAAvC;AAEA,MAAGG,OAAH,EAAY,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACZ,MAAGC,KAAH,EAAU,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AAEV,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,OAAL,CAAaC,IADhB,CADF,CANqC,CAWrC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE;AACA;AAEA;AACA;AACC,CA9BL,C,CAgCM;AACA;AAEA;AACA;AACA;AAEA;AACN;AACA;AACA;AAEA;;;AACA,eAAeN,cAAf","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { graphql, useQuery, Query } from \"react-apollo\";\nimport { Component } from \"react\";\n\nconst SECTION_DETAILS = gql`\n{\n    sections {\n      name\n      text\n  }\n}\n`;\n\n// interface SectionType {\n//   data: object[]\n\n// }\n// const linksToRender = [\n//   {\n//     \"name\": \"Prisma turns your database into a GraphQL API \",\n//     \"text\": \"https://www.prismagraphql.com\",\n//   },\n//   {\n//     \"name\": \"The best GraphQL client\",\n//     \"text\": \"ttps://www.apollographql.com/docs/react/\",\n//   },\n// ]\n\nconst SectionDetails = ({sections}) => {\n  const {loading, error, data} = useQuery(SECTION_DETAILS)\n\n  if(loading) return <div>Loading...</div>\n  if(error) return <div>On ho</div>\n\n  return (\n    <div>\n      {data.section.name}\n    </div>\n  )\n  // displaySections() {\n  //     var data = this.props.data;\n\n  //     // if(data.loading){\n  //     //     return( <div>Loading sections</div> );\n  //     // } \n  //     // else {\n  //     //     return data.sections.map(section => {\n  //     //         return( <li key={section.id}>{ section.name }</li> );\n  //     //     });\n  //     // }\n  // }\n\n\n    // return (\n    //   <Query query={SECTION_DETAILS}>\n    \n    //   </Query>\n    // )\n    }\n      \n      // <div>\n      //   {linksToRender.map((section) => <div key={section.name}>{section.name}</div>)}\n        \n      // </div>\n      // {/* <ul id=\"sections-list\">\n      //     {/* {this.displaySections()} */}\n          \n      //   </ul> */}\n//     );\n//   }\n// }\n\n// export default graphql(SECTION_DETAILS)(SectionDetails);\nexport default SectionDetails;\n"]},"metadata":{},"sourceType":"module"}