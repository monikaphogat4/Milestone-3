{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/m0p024f/WebstormProjects/Milestone 3/components/Sections.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n{\\n    sections {\\n      name\\n      text\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"apollo-boost\";\nimport { graphql, Query } from \"react-apollo\";\nimport { Component } from \"react\";\nvar SECTION_DETAILS = gql(_templateObject()); // interface SectionType {\n//   data: object[]\n// }\n\nvar linksToRender = [{\n  \"name\": \"Prisma turns your database into a GraphQL API \",\n  \"text\": \"https://www.prismagraphql.com\"\n}, {\n  \"name\": \"The best GraphQL client\",\n  \"text\": \"ttps://www.apollographql.com/docs/react/\"\n}];\n\nvar SectionDetails = /*#__PURE__*/function (_Component) {\n  _inherits(SectionDetails, _Component);\n\n  var _super = _createSuper(SectionDetails);\n\n  function SectionDetails() {\n    _classCallCheck(this, SectionDetails);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SectionDetails, [{\n    key: \"render\",\n    // displaySections() {\n    //     var data = this.props.data;\n    //     // if(data.loading){\n    //     //     return( <div>Loading sections</div> );\n    //     // } \n    //     // else {\n    //     //     return data.sections.map(section => {\n    //     //         return( <li key={section.id}>{ section.name }</li> );\n    //     //     });\n    //     // }\n    // }\n    value: function render() {\n      var _this = this;\n\n      console.log(this.props);\n      return __jsx(Query, {\n        query: SECTION_DETAILS,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, function (_ref) {\n        var loading = _ref.loading,\n            error = _ref.error,\n            data = _ref.data;\n        if (loading) return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 31\n          }\n        }, \"Fetching\");\n        if (error) return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }\n        }, \"Error\");\n        var linksToRender = data.feed.links;\n        return __jsx(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }\n        }, linksToRender.map(function (link) {\n          return __jsx(Link, {\n            key: link.id,\n            link: link,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 42\n            }\n          });\n        }));\n      }) // <div>\n      //   {linksToRender.map((section) => <div key={section.name}>{section.name}</div>)}\n      // </div>\n      // {/* <ul id=\"sections-list\">\n      //     {/* {this.displaySections()} */}\n      //   </ul> */}\n      ;\n    }\n  }]);\n\n  return SectionDetails;\n}(Component);\n\nexport default graphql(SECTION_DETAILS)(SectionDetails);","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/components/Sections.tsx"],"names":["gql","graphql","Query","Component","SECTION_DETAILS","linksToRender","SectionDetails","console","log","props","loading","error","data","feed","links","map","link","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,OAAT,EAA4BC,KAA5B,QAAyC,cAAzC;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,IAAMC,eAAe,GAAGJ,GAAH,mBAArB,C,CASA;AACA;AAEA;;AACA,IAAMK,aAAa,GAAG,CACpB;AACE,UAAQ,gDADV;AAEE,UAAQ;AAFV,CADoB,EAKpB;AACE,UAAQ,yBADV;AAEE,UAAQ;AAFV,CALoB,CAAtB;;IAWMC,c;;;;;;;;;;;;;AACJ;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAGS;AAAA;;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,aACE,MAAC,KAAD;AAAO,QAAA,KAAK,EAAEL,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,gBAA8B;AAAA,YAA3BM,OAA2B,QAA3BA,OAA2B;AAAA,YAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,YAAXC,IAAW,QAAXA,IAAW;AAC7B,YAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACb,YAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AAEX,YAAMN,aAAa,GAAGO,IAAI,CAACC,IAAL,CAAUC,KAAhC;AAEA,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGT,aAAa,CAACU,GAAd,CAAkB,UAAAC,IAAI;AAAA,iBAAI,MAAC,IAAD;AAAM,YAAA,GAAG,EAAEA,IAAI,CAACC,EAAhB;AAAoB,YAAA,IAAI,EAAED,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAJ;AAAA,SAAtB,CADH,CADF;AAKD,OAZH,CADF,CAeE;AACA;AAEA;AACA;AACA;AAEA;AAtBF;AAwBD;;;;EAzC0Bb,S;;AA4C7B,eAAeF,OAAO,CAACG,eAAD,CAAP,CAAyBE,cAAzB,CAAf","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { graphql, useQuery, Query } from \"react-apollo\";\nimport { Component } from \"react\";\n\nconst SECTION_DETAILS = gql`\n{\n    sections {\n      name\n      text\n  }\n}\n`;\n\n// interface SectionType {\n//   data: object[]\n\n// }\nconst linksToRender = [\n  {\n    \"name\": \"Prisma turns your database into a GraphQL API \",\n    \"text\": \"https://www.prismagraphql.com\",\n  },\n  {\n    \"name\": \"The best GraphQL client\",\n    \"text\": \"ttps://www.apollographql.com/docs/react/\",\n  },\n]\n\nclass SectionDetails extends Component {\n  // displaySections() {\n  //     var data = this.props.data;\n\n  //     // if(data.loading){\n  //     //     return( <div>Loading sections</div> );\n  //     // } \n  //     // else {\n  //     //     return data.sections.map(section => {\n  //     //         return( <li key={section.id}>{ section.name }</li> );\n  //     //     });\n  //     // }\n  // }\n\n\n  render() {\n    console.log(this.props);\n    return (\n      <Query query={SECTION_DETAILS}>\n        {({ loading, error, data }) => {\n          if (loading) return <div>Fetching</div>\n          if (error) return <div>Error</div>\n    \n          const linksToRender = data.feed.links\n    \n          return (\n            <div>\n              {linksToRender.map(link => <Link key={link.id} link={link} />)}\n            </div>\n          )\n        }}\n      </Query>\n      // <div>\n      //   {linksToRender.map((section) => <div key={section.name}>{section.name}</div>)}\n        \n      // </div>\n      // {/* <ul id=\"sections-list\">\n      //     {/* {this.displaySections()} */}\n          \n      //   </ul> */}\n    );\n  }\n}\n\nexport default graphql(SECTION_DETAILS)(SectionDetails);\n"]},"metadata":{},"sourceType":"module"}