{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server-micro\";\nimport sections from \"./../Data/data\";\nconst typeDefs = gql`\n  type Section {\n    name: String!\n    text: String\n    style: String\n    baseUrl: String!\n    imageCount: [ImageCount]\n  }\n\n  type Query {\n    sections: [Section]\n  }\n\n  type ImageCount {\n    noOfImages: Int\n  }\n\n  type Mutation {\n    updateSection(name: String!, text: String!): Section\n  }\n`;\nconst ImageCount = [{\n  noOfImages: 20\n}]; //instruct Apollo on how to fetch the data and how to update it.\n\nconst resolvers = {\n  Query: {\n    sections: () => sections\n  },\n  Mutation: {\n    updateSection: (root, args) => {\n      section.name = args.name;\n      section.text = args.text;\n      return section;\n    }\n  }\n}; //setup apollo server\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = server.createHandler({\n  path: \"/api/graphql-data\"\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}