{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, Fragment } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { graphql } from \"react-apollo\";\nimport Head from \"next/head\";\n\nclass MainImage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"imageRef\", void 0);\n\n    _defineProperty(this, \"textChange\", void 0);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      window.addEventListener(\"scroll\", this.handleScroll);\n      this.imageRef.current.src = \"img/01-hero-lightpass/0000.jpg\";\n      this.fetchData();\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      window.removeEventListener(\"scroll\", this.handleScroll);\n    });\n\n    _defineProperty(this, \"handleScroll\", () => {\n      const scrollThreshold = this.state.scrollThreshold;\n      let newIndex;\n      let sTop = window.scrollY; //number of pixels document is currently scrolled vertically\n\n      let index = sTop / scrollThreshold;\n      index = Math.floor(index);\n\n      if (this.props.data.loading) {\n        return console.log(\"Loading\");\n      }\n\n      if (index < 148) {\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[0].name, index, this.props.data.sections[0].baseUrl);\n        this.textChange.current.innerHTML = this.props.data.sections[0].text; //text for each section\n      } else if (index >= 148 && index < 280) {\n        newIndex = index - 148;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[1].name, newIndex, this.props.data.sections[1].baseUrl);\n        this.textChange.current.innerHTML = this.props.data.sections[1].text;\n      } else if (index >= 280 && index < 368) {\n        newIndex = index - 280;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[2].name, newIndex, this.props.data.sections[2].baseUrl);\n        this.textChange.current.innerHTML = this.props.data.sections[2].text;\n      } else if (index >= 368 && index < 506) {\n        newIndex = index - 368;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[3].name, newIndex, this.props.data.sections[3].baseUrl);\n        this.textChange.current.innerHTML = this.props.data.sections[3].text;\n      } else if (index >= 506 && index < 645) {\n        newIndex = index - 506;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[4].name, newIndex, this.props.data.sections[4].baseUrl);\n        this.textChange.current.innerHTML = this.props.data.sections[4].text;\n      } else if (index >= 645 && index < 821) {\n        newIndex = index - 645;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[5].name, newIndex, this.props.data.sections[5].baseUrl);\n      } else if (index >= 821 && index < 889) {\n        newIndex = index - 821;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[6].name, newIndex, this.props.data.sections[6].baseUrl);\n      } else if (index >= 889 && index < 978) {\n        newIndex = index - 889;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[7].name, newIndex, this.props.data.sections[7].baseUrl);\n        this.textChange.current.innerHTML = \"\"; //this section has no text\n      } else if (index >= 978 && index < 1212) {\n        newIndex = index - 978;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[8].name, newIndex, this.props.data.sections[8].baseUrl);\n      } else {\n        newIndex = index - 1212;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[9].name, newIndex, this.props.data.sections[9].baseUrl);\n        this.textChange.current.innerHTML = this.props.data.sections[9].text;\n      }\n    });\n\n    this.handleScroll = this.handleScroll.bind(this);\n    this.imageRef = /*#__PURE__*/React.createRef();\n    this.textChange = /*#__PURE__*/React.createRef();\n    this.state = {\n      scrollThreshold: 10,\n      loading: false,\n      data: null\n    };\n  } // on DOM render  display default image\n\n\n  fetchData() {\n    fetch(\"/api/graphql-data\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: \"{ sections { name } }\"\n      })\n    }).then(res => res.json()).then(res => this.setState({\n      data: res.data\n    }));\n  } //to create file path to be retrieved from Public folder\n\n\n  getImagePath(section, index, baseUrl) {\n    let fileName = \"\";\n    fileName = index.toString().padStart(4, \"000\");\n    console.log(`${baseUrl}/${section}/${fileName}.jpg`);\n    return `${baseUrl}/${section}/${fileName}.jpg`;\n  }\n\n  render() {\n    return __jsx(Fragment, null, __jsx(Head, null, __jsx(\"div\", null, \"Image React App\")), __jsx(\"section\", null, __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"div-content\"\n    }, __jsx(\"p\", {\n      ref: this.textChange\n    })), __jsx(\"img\", {\n      className: \"responsive\",\n      ref: this.imageRef,\n      src: \"\"\n    }))));\n  }\n\n}\n\nconst GET_SECTION_DETAILS = gql`\n  {\n    sections {\n      name\n      text\n      baseUrl\n    }\n  }\n`;\nexport default graphql(GET_SECTION_DETAILS)(MainImage);","map":null,"metadata":{},"sourceType":"module"}