{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server-micro\";\nconst typeDefs = gql`\ntype Section {\n    name: String\n    text: String\n}\n\ntype Query  {\n    sections: [Section]\n}\n`;\nconst sections = [{\n  name: \"01-hero-lightpass\",\n  text: \"Active Noise Cancellation for immersive sound. Transparency mode for hearing what is happening around you.\"\n}, {\n  name: \"02-bob-turn\",\n  text: \"Section-02\"\n}];\nconst resolvers = {\n  Query: {\n    sections: () => sections\n  }\n};\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = server.createHandler({\n  path: \"/api/graphql-data\"\n}); // The `listen` method launches a web server.\n// server.listen().then(({ url }) => {\n//   console.log(`ðŸš€  Server ready at ${url}`);\n// });\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/pages/api/graphql-data.js"],"names":["ApolloServer","gql","typeDefs","sections","name","text","resolvers","Query","server","handler","createHandler","path","config","api","bodyParser"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAiC,qBAAjC;AAEA,MAAMC,QAAQ,GAAKD,GAAI;;;;;;;;;CAAvB;AAUA,MAAME,QAAQ,GAAG,CACb;AACEC,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADa,EAKb;AACID,EAAAA,IAAI,EAAE,aADV;AAEIC,EAAAA,IAAI,EAAE;AAFV,CALa,CAAjB;AAWE,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,QAAQ,EAAE,MAAMA;AADX;AADS,CAAlB;AAMA,MAAMK,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAAEE,EAAAA,QAAF;AAAYI,EAAAA;AAAZ,CAAjB,CAAf;AAEA,MAAMG,OAAO,GAAGD,MAAM,CAACE,aAAP,CAAqB;AAACC,EAAAA,IAAI,EAAE;AAAP,CAArB,CAAhB,C,CACF;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG;AAClBC,EAAAA,GAAG,EAAE;AACDC,IAAAA,UAAU,EAAE;AADX;AADa,CAAf;AAKP,eAAeL,OAAf","sourcesContent":["import  {ApolloServer, gql} from \"apollo-server-micro\"\n\nconst typeDefs  =  gql`\ntype Section {\n    name: String\n    text: String\n}\n\ntype Query  {\n    sections: [Section]\n}\n`;\nconst sections = [\n    {\n      name: \"01-hero-lightpass\",\n      text: \"Active Noise Cancellation for immersive sound. Transparency mode for hearing what is happening around you.\",\n    },\n    {\n        name: \"02-bob-turn\",\n        text: \"Section-02\",\n      },\n  ];\n\n  const resolvers = {\n    Query: {\n      sections: () => sections,\n    },\n  };\n\n  const server = new ApolloServer({ typeDefs, resolvers });\n\n  const handler = server.createHandler({path: \"/api/graphql-data\"});\n// The `listen` method launches a web server.\n// server.listen().then(({ url }) => {\n//   console.log(`ðŸš€  Server ready at ${url}`);\n// });\nexport const config = {\n    api: {\n        bodyParser: false\n    }\n}\nexport default handler"]},"metadata":{},"sourceType":"module"}