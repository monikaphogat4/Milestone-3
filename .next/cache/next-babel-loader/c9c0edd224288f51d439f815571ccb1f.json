{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server-micro\";\nconst typeDefs = gql`\n  type Section {\n    name: String\n    text: String\n  }\n\n  type Query {\n    sections: [Section]\n  }\n`;\nconst sections = [{\n  name: \"01-hero-lightpass\",\n  text: \"Active Noise Cancellation for immersive sound. Transparency mode for hearing what is happening around you.\"\n}, {\n  name: \"02-head-bob-turn\",\n  text: \"Arrival of the fittest.\"\n}, {\n  name: \"03-flip-for-guts\",\n  text: \"Sound that cuts out the noise.\"\n}, {\n  name: \"04-explode-tips\",\n  text: \"Choose from three sizes of soft, flexible silicone tips that click into place. Find the best fit and get the best sound by using the Ear Tip Fit Test.\"\n}, {\n  name: \"05-flip-for-nc\",\n  text: \"Enjoy superior sound quality with Adaptive EQ, which automatically tunes music to the shape of your ear for a rich, consistent listening experience.\"\n}, {\n  name: \"06-transparency-head\"\n}, {\n  name: \"07-flip-reveal-guts\"\n}, {\n  name: \"08-turn-for-chip\"\n}, {\n  name: \"09-scoop-turn\"\n}, {\n  name: \"10-fall-into-case\",\n  text: \"Charge wirelessly. Use tirelessly.\"\n}];\nconst resolvers = {\n  Query: {\n    sections: () => sections\n  }\n};\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = server.createHandler({\n  path: \"/api/graphql-data\"\n}); // The `listen` method launches a web server.\n// server.listen().then(({ url }) => {\n//   console.log(`ðŸš€  Server ready at ${url}`);\n// });\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}