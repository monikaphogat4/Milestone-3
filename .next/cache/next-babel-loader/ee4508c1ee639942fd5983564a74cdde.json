{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    sections {\\n      name\\n      text\\n      baseUrl\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { graphql } from \"react-apollo\";\n\nvar MainImage = /*#__PURE__*/function (_Component) {\n  _inherits(MainImage, _Component);\n\n  var _super = _createSuper(MainImage);\n\n  function MainImage(props) {\n    var _this;\n\n    _classCallCheck(this, MainImage);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"imageRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"textChange\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      window.addEventListener(\"scroll\", _this.handleScroll);\n      _this.imageRef.current.src = \"img/01-hero-lightpass/0000.jpg\";\n\n      _this.fetchData();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function () {\n      window.removeEventListener(\"scroll\", _this.handleScroll);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", function () {\n      var scrollThreshold = _this.state.scrollThreshold;\n      var newIndex;\n      var sTop = window.scrollY; //number of pixels document is currently scrolled vertically\n\n      var index = sTop / scrollThreshold;\n      index = Math.floor(index);\n\n      if (_this.props.data.loading) {\n        return console.log(\"Loading\");\n      }\n\n      if (index < 148) {\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[0].name, index, _this.props.data.sections[0].baseUrl);\n        _this.textChange.current.innerHTML = _this.props.data.sections[0].text; //text for each section\n      } else if (index >= 148 && index < 280) {\n        newIndex = index - 148;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[1].name, newIndex, _this.props.data.sections[1].baseUrl);\n        _this.textChange.current.innerHTML = _this.props.data.sections[1].text;\n      } else if (index >= 280 && index < 368) {\n        newIndex = index - 280;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[2].name, newIndex, _this.props.data.sections[2].baseUrl);\n        _this.textChange.current.innerHTML = _this.props.data.sections[2].text;\n      } else if (index >= 368 && index < 506) {\n        newIndex = index - 368;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[3].name, newIndex, _this.props.data.sections[3].baseUrl);\n        _this.textChange.current.innerHTML = _this.props.data.sections[3].text;\n      } else if (index >= 506 && index < 645) {\n        newIndex = index - 506;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[4].name, newIndex, _this.props.data.sections[4].baseUrl);\n        _this.textChange.current.innerHTML = _this.props.data.sections[4].text;\n      } else if (index >= 645 && index < 821) {\n        newIndex = index - 645;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[5].name, newIndex, _this.props.data.sections[5].baseUrl);\n      } else if (index >= 821 && index < 889) {\n        newIndex = index - 821;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[6].name, newIndex, _this.props.data.sections[6].baseUrl);\n      } else if (index >= 889 && index < 978) {\n        newIndex = index - 889;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[7].name, newIndex, _this.props.data.sections[7].baseUrl);\n        _this.textChange.current.innerHTML = \"\"; //this section has no text\n      } else if (index >= 978 && index < 1212) {\n        newIndex = index - 978;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[8].name, newIndex, _this.props.data.sections[8].baseUrl);\n      } else {\n        newIndex = index - 1212;\n        _this.imageRef.current.src = _this.getImagePath(_this.props.data.sections[9].name, newIndex, _this.props.data.sections[9].baseUrl);\n        _this.textChange.current.innerHTML = _this.props.data.sections[9].text;\n      }\n    });\n\n    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_this));\n    _this.imageRef = /*#__PURE__*/React.createRef();\n    _this.textChange = /*#__PURE__*/React.createRef();\n    _this.state = {\n      scrollThreshold: 10,\n      loading: false,\n      data: null\n    };\n    return _this;\n  } // on DOM render  display default image\n\n\n  _createClass(MainImage, [{\n    key: \"fetchData\",\n    value: function fetchData() {\n      var _this2 = this;\n\n      fetch(\"/api/graphql-data\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          query: \"{ sections { name } }\"\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        return _this2.setState({\n          data: res.data\n        });\n      });\n    } //to create file path to be retrieved from Public folder\n\n  }, {\n    key: \"getImagePath\",\n    value: function getImagePath(section, index, baseUrl) {\n      var fileName = \"\";\n      fileName = index.toString().padStart(4, \"000\");\n      console.log(\"\".concat(baseUrl, \"/\").concat(section, \"/\").concat(fileName, \".jpg\"));\n      return \"\".concat(baseUrl, \"/\").concat(section, \"/\").concat(fileName, \".jpg\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (//   data.sections.map((section) => {\n        //   })\n        //   <Head>  \n        //      <link rel=\"preload\" href=\"bg-image-wide.png\"></link>\n        // </Head>\n        __jsx(\"section\", null, __jsx(\"div\", null, __jsx(\"div\", {\n          className: \"div-content\"\n        }, __jsx(\"p\", {\n          ref: this.textChange\n        })), __jsx(\"img\", {\n          className: \"responsive\",\n          ref: this.imageRef,\n          src: \"\"\n        })))\n      );\n    }\n  }]);\n\n  return MainImage;\n}(Component);\n\nvar GET_SECTION_DETAILS = gql(_templateObject());\nexport default graphql(GET_SECTION_DETAILS)(MainImage);","map":null,"metadata":{},"sourceType":"module"}