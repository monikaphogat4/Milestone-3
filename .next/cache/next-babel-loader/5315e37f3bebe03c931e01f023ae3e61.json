{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server\";\nconst typeDefs = gql`\ntype Section {\n    name: String\n    text: String\n}\n\ntype Query  {\n    sections: [Section]\n}\n`;\nconst sections = [{\n  name: \"01-hero-lightpass\",\n  text: \"Section-01\"\n}, {\n  name: \"02-bob-turn\",\n  text: \"Section-02\"\n}];\nconst resolvers = {\n  Query: {\n    sections: () => sections\n  }\n};\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n}); // The `listen` method launches a web server.\n\nserver.listen().then(({\n  url\n}) => {\n  console.log(`ğŸš€  Server ready at ${url}`);\n});","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/pages/api/graphql-data.js"],"names":["ApolloServer","gql","typeDefs","sections","name","text","resolvers","Query","server","listen","then","url","console","log"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAiC,eAAjC;AAEA,MAAMC,QAAQ,GAAKD,GAAI;;;;;;;;;CAAvB;AAUA,MAAME,QAAQ,GAAG,CACb;AACEC,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADa,EAKb;AACID,EAAAA,IAAI,EAAE,aADV;AAEIC,EAAAA,IAAI,EAAE;AAFV,CALa,CAAjB;AAWE,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,QAAQ,EAAE,MAAMA;AADX;AADS,CAAlB;AAMA,MAAMK,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAAEE,EAAAA,QAAF;AAAYI,EAAAA;AAAZ,CAAjB,CAAf,C,CAEF;;AACAE,MAAM,CAACC,MAAP,GAAgBC,IAAhB,CAAqB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBF,GAAI,EAAvC;AACD,CAFD","sourcesContent":["import  {ApolloServer, gql} from \"apollo-server\"\n\nconst typeDefs  =  gql`\ntype Section {\n    name: String\n    text: String\n}\n\ntype Query  {\n    sections: [Section]\n}\n`\nconst sections = [\n    {\n      name: \"01-hero-lightpass\",\n      text: \"Section-01\",\n    },\n    {\n        name: \"02-bob-turn\",\n        text: \"Section-02\",\n      },\n  ];\n\n  const resolvers = {\n    Query: {\n      sections: () => sections,\n    },\n  };\n\n  const server = new ApolloServer({ typeDefs, resolvers });\n\n// The `listen` method launches a web server.\nserver.listen().then(({ url }) => {\n  console.log(`ğŸš€  Server ready at ${url}`);\n});"]},"metadata":{},"sourceType":"module"}