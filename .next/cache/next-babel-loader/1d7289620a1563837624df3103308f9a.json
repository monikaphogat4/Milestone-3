{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport sectionInfo from \"../redux/actions/index\";\n\nclass MainImage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      window.addEventListener(\"scroll\", this.handleScroll);\n      this.imageRef.current.src = \"img/01-hero-lightpass/0000.jpg\";\n      this.props.updateSectionInfo({\n        sections: [{\n          name: \"01-hero-lightpass\",\n          style: \"white\",\n          text: \"Active Noise Cancellation for immersive sound. Transparency mode for hearing what is happening around you.\"\n        }, {\n          name: \"02-head-bob-turn\",\n          text: \"Arrival of the fittest.\"\n        }, {\n          name: \"03-flip-for-guts\",\n          text: \"Sound that cuts out the noise.\"\n        }, {\n          name: \"04-explode-tips\",\n          text: \"Choose from three sizes of soft, flexible silicone tips that click into place. Find the best fit and get the best sound by using the Ear Tip Fit Test.\"\n        }, {\n          name: \"05-flip-for-nc\",\n          style: \"white\",\n          text: \"Enjoy superior sound quality with Adaptive EQ, which automatically tunes music to the shape of your ear for a rich, consistent listening experience.\"\n        }, {\n          name: \"06-transparency-head\"\n        }, {\n          name: \"07-flip-reveal-guts\",\n          style: \"white\"\n        }, {\n          name: \"08-turn-for-chip\"\n        }, {\n          name: \"09-scoop-turn\",\n          style: \"black\"\n        }, {\n          name: \"10-fall-into-case\",\n          style: \"white\",\n          text: \"Charge wirelessly. Use tirelessly.\"\n        }]\n      });\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      window.removeEventListener(\"scroll\", this.handleScroll);\n    });\n\n    _defineProperty(this, \"handleScroll\", e => {\n      const scrollThreshold = this.state.scrollThreshold;\n      let newIndex;\n      let sTop = window.scrollY; //number of pixels document is currently scrolled vertically\n\n      let index = sTop / scrollThreshold;\n      index = Math.floor(index);\n\n      if (index < 148) {\n        this.imageRef.current.src = this.getImagePath(this.props.sections[0].name, index);\n        this.textChange.current.innerHTML = this.props.sections[0].text; //text for each section\n      } else if (index >= 148 && index < 280) {\n        newIndex = index - 148;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[1].name, newIndex);\n        this.textChange.current.innerHTML = this.props.sections[1].text;\n      } else if (index >= 280 && index < 368) {\n        newIndex = index - 280;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[2].name, newIndex);\n        this.textChange.current.innerHTML = this.props.sections[2].text;\n      } else if (index >= 368 && index < 506) {\n        newIndex = index - 368;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[3].name, newIndex);\n        this.textChange.current.src = this.props.sections[3].text;\n      } else if (index >= 506 && index < 645) {\n        newIndex = index - 506;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[4].name, newIndex);\n        this.textChange.current.src = this.props.sections[4].text;\n      } else if (index >= 645 && index < 821) {\n        newIndex = index - 645;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[5].name, newIndex);\n      } else if (index >= 821 && index < 889) {\n        newIndex = index - 821;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[6].name, newIndex);\n      } else if (index >= 889 && index < 978) {\n        newIndex = index - 889;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[7].name, newIndex);\n        this.textChange.current.innerHTML = \"\"; //this section has no text\n      } else if (index >= 978 && index < 1212) {\n        newIndex = index - 978;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[8].name, newIndex);\n      } else {\n        newIndex = index - 1212;\n        this.imageRef.current.src = this.getImagePath(this.props.sections[9].name, newIndex);\n        this.textChange.current.innerHTML = this.props.sections[9].text;\n      }\n    });\n\n    this.handleScroll = this.handleScroll.bind(this);\n    this.imageRef = /*#__PURE__*/React.createRef();\n    this.textChange = /*#__PURE__*/React.createRef();\n    this.state = {\n      scrollThreshold: 10\n    };\n  } // on DOM render  display default image\n\n\n  //to create file path to be retrieved from Public folder\n  getImagePath(section, index) {\n    const i = index / 10;\n    let fileName = \"\";\n\n    if (i >= 1) {\n      fileName = index > 99 ? `0${index}` : `00${index}`;\n    } else {\n      fileName = `000${index}`;\n    }\n\n    return `/img/${section}/${fileName}.jpg`;\n  }\n\n  render() {\n    return __jsx(\"section\", null, __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"div-content\"\n    }, __jsx(\"p\", {\n      ref: this.textChange\n    })), __jsx(\"img\", {\n      className: \"responsive\",\n      ref: this.imageRef,\n      src: \"\"\n    })));\n  }\n\n} //select data from store that connected component needs\n\n\nconst mapStateToProps = state => ({\n  sections: state.sectionState.sections\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateSectionInfo: data => dispatch(sectionInfo(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainImage);","map":null,"metadata":{},"sourceType":"module"}