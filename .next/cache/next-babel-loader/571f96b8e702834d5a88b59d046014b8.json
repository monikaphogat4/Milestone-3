{"ast":null,"code":"var _jsxFileName = \"/Users/m0p024f/WebstormProjects/Milestone 3/components/MainImage.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { graphql } from \"react-apollo\";\n\nclass MainImage extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"imageRef\", void 0);\n\n    _defineProperty(this, \"textChange\", void 0);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      window.addEventListener(\"scroll\", this.handleScroll);\n      this.imageRef.current.src = \"img/01-hero-lightpass/0000.jpg\";\n      this.fetchData();\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      window.removeEventListener(\"scroll\", this.handleScroll);\n    });\n\n    _defineProperty(this, \"handleScroll\", e => {\n      const scrollThreshold = this.state.scrollThreshold;\n      let newIndex;\n      let sTop = window.scrollY; //number of pixels document is currently scrolled vertically\n\n      let index = sTop / scrollThreshold;\n      index = Math.floor(index);\n\n      if (this.props.data.loading) {\n        return console.log(\"Loading\");\n      }\n\n      if (index < 148) {\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[0].name, index);\n        this.textChange.current.innerHTML = this.props.data.sections[0].text; //text for each section\n      } else if (index >= 148 && index < 280) {\n        newIndex = index - 148;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[1].name, newIndex);\n        this.textChange.current.innerHTML = this.props.data.sections[1].text;\n      } else if (index >= 280 && index < 368) {\n        newIndex = index - 280;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[2].name, newIndex);\n        this.textChange.current.innerHTML = this.props.data.sections[2].text;\n      } else if (index >= 368 && index < 506) {\n        newIndex = index - 368;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[3].name, newIndex);\n        this.textChange.current.src = this.props.data.sections[3].text;\n      } else if (index >= 506 && index < 645) {\n        newIndex = index - 506;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[4].name, newIndex);\n        this.textChange.current.src = this.props.data.sections[4].text;\n      } else if (index >= 645 && index < 821) {\n        newIndex = index - 645;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[5].name, newIndex);\n      } else if (index >= 821 && index < 889) {\n        newIndex = index - 821;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[6].name, newIndex);\n      } else if (index >= 889 && index < 978) {\n        newIndex = index - 889;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[7].name, newIndex);\n        this.textChange.current.innerHTML = \"\"; //this section has no text\n      } else if (index >= 978 && index < 1212) {\n        newIndex = index - 978;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[8].name, newIndex);\n      } else {\n        newIndex = index - 1212;\n        this.imageRef.current.src = this.getImagePath(this.props.data.sections[9].name, newIndex);\n        this.textChange.current.innerHTML = this.props.data.sections[9].text;\n      }\n    });\n\n    this.handleScroll = this.handleScroll.bind(this);\n    this.imageRef = /*#__PURE__*/React.createRef();\n    this.textChange = /*#__PURE__*/React.createRef();\n    this.state = {\n      scrollThreshold: 10,\n      loading: false,\n      data: null\n    };\n  } // on DOM render  display default image\n\n\n  fetchData() {\n    fetch(\"/api/graphql-data\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        query: \"{ sections { name } }\"\n      })\n    }).then(res => res.json()).then(res => this.setState({\n      data: res.data\n    }));\n  } //to create file path to be retrieved from Public folder\n\n\n  getImagePath(section, index) {\n    const i = index / 10;\n    let fileName = \"\";\n\n    if (i >= 1) {\n      fileName = index > 99 ? `0${index}` : `00${index}`;\n    } else {\n      fileName = `000${index}`;\n    }\n\n    return `/img/${section}/${fileName}.jpg`;\n  }\n\n  render() {\n    return __jsx(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"div-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      ref: this.textChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    })), __jsx(\"img\", {\n      className: \"responsive\",\n      ref: this.imageRef,\n      src: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nconst GET_SECTION_DETAILS = gql`\n  {\n    sections {\n      name\n      text\n      images\n    }\n  }\n`;\nexport default graphql(GET_SECTION_DETAILS)(MainImage);","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/components/MainImage.tsx"],"names":["React","Component","gql","graphql","MainImage","constructor","props","window","addEventListener","handleScroll","imageRef","current","src","fetchData","removeEventListener","e","scrollThreshold","state","newIndex","sTop","scrollY","index","Math","floor","data","loading","console","log","getImagePath","sections","name","textChange","innerHTML","text","bind","createRef","fetch","method","headers","body","JSON","stringify","query","then","res","json","setState","section","i","fileName","render","GET_SECTION_DETAILS"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { graphql, useQuery, Query } from \"react-apollo\";\n\ninterface ImageComponentProps {\n  data: object,\n  sections: Array<any>\n  loading: boolean\n}\n\ninterface ImageComponentState {\n  scrollThreshold: number,\n  loading: boolean,\n  data: object\n}\n\nclass MainImage extends Component<ImageComponentProps, ImageComponentState> {\n  imageRef: React.RefObject<HTMLImageElement>;\n  textChange: React.RefObject<HTMLParagraphElement>;\n\n  constructor(props) {\n    super(props);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.imageRef = React.createRef();\n    this.textChange = React.createRef();\n\n    this.state = {\n      scrollThreshold: 10,\n      loading: false,\n      data: null,\n    };\n  }\n\n  // on DOM render  display default image\n  componentDidMount = () => {\n    window.addEventListener(\"scroll\", this.handleScroll);\n    this.imageRef.current.src = \"img/01-hero-lightpass/0000.jpg\";\n    this.fetchData();\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  };\n\n\n  fetchData() {\n    fetch(\"/api/graphql-data\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ query: \"{ sections { name } }\" }),\n    })\n      .then((res) => res.json())\n      .then((res) => this.setState({data: res.data}));\n  }\n\n  //to create file path to be retrieved from Public folder\n  getImagePath(section, index) {\n    const i = index / 10;\n    let fileName = \"\";\n\n    if (i >= 1) {\n      fileName = index > 99 ? `0${index}` : `00${index}`;\n    } else {\n      fileName = `000${index}`;\n    }\n    return `/img/${section}/${fileName}.jpg`;\n  }\n\n  handleScroll = (e) => {\n    const scrollThreshold = this.state.scrollThreshold;\n\n    let newIndex;\n\n    let sTop = window.scrollY; //number of pixels document is currently scrolled vertically\n    let index = sTop / scrollThreshold;\n\n    index = Math.floor(index);\n\n    if(this.props.data.loading) {\n      return (console.log(\"Loading\"))\n    }\n\n  \n    if (index < 148) {\n      this.imageRef.current.src = this.getImagePath(this.props.data.sections[0].name, index);\n      this.textChange.current.innerHTML = this.props.data.sections[0].text;\n      //text for each section\n    } else if (index >= 148 && index < 280) {\n      newIndex = index - 148;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[1].name,\n        newIndex\n      );\n      this.textChange.current.innerHTML = this.props.data.sections[1].text;\n     } else if (index >= 280 && index < 368) {\n      newIndex = index - 280;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[2].name,\n        newIndex\n      );\n      this.textChange.current.innerHTML = this.props.data.sections[2].text;\n    } else if (index >= 368 && index < 506) {\n      newIndex = index - 368;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[3].name,\n        newIndex\n      );\n      this.textChange.current.src = this.props.data.sections[3].text;\n    } else if (index >= 506 && index < 645) {\n      newIndex = index - 506;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[4].name,\n        newIndex\n      );\n      this.textChange.current.src = this.props.data.sections[4].text;\n    } else if (index >= 645 && index < 821) {\n      newIndex = index - 645;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[5].name,\n        newIndex\n      );\n    } else if (index >= 821 && index < 889) {\n      newIndex = index - 821;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[6].name,\n        newIndex\n      );\n    } else if (index >= 889 && index < 978) {\n      newIndex = index - 889;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[7].name,\n        newIndex\n      );\n      this.textChange.current.innerHTML = \"\"; //this section has no text\n    } else if (index >= 978 && index < 1212) {\n      newIndex = index - 978;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[8].name,\n        newIndex\n      );\n    } else {\n      newIndex = index - 1212;\n      this.imageRef.current.src = this.getImagePath(\n        this.props.data.sections[9].name,\n        newIndex\n      );\n      this.textChange.current.innerHTML = this.props.data.sections[9].text;\n    }\n  };\n\n  render() {\n  \n    return (\n      <section>\n        <div>\n          <div className=\"div-content\">\n            <p ref={this.textChange}></p>\n          </div>\n          <img className=\"responsive\" ref={this.imageRef} src=\"\"></img>\n        </div>\n      </section>\n    );\n  }\n}\n\nconst GET_SECTION_DETAILS = gql`\n  {\n    sections {\n      name\n      text\n      images\n    }\n  }\n`;\n\nexport default graphql(GET_SECTION_DETAILS )(MainImage);\n"]},"metadata":{},"sourceType":"module"}