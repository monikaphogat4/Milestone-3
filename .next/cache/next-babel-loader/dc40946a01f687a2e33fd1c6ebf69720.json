{"ast":null,"code":"var _jsxFileName = \"/Users/m0p024f/WebstormProjects/Milestone 3/components/MainImage.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery, gql } from '@apollo/client';\nconst SECTION_DETAILS = gql`\nquery AllSections {\n  sections {\n    name\n    text\n  }\n}\n`;\n\nfunction SectionDetails() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(SECTION_DETAILS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 22\n    }\n  }, \"Loading\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, \"Error :(\");\n  return data.sections.map(({\n    name,\n    text\n  }) => __jsx(\"div\", {\n    key: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, name, \": \", text)));\n}\n\nexport default SectionDetails; // class MainImage extends Component {\n//   imageRef: React.RefObject<HTMLImageElement>;\n//   textChange: React.RefObject<HTMLParagraphElement>;\n//   constructor(props) {\n//     super(props);\n//     this.handleScroll = this.handleScroll.bind(this);\n//     this.imageRef = React.createRef();\n//     this.textChange = React.createRef();\n//     this.state = {\n//       scrollThreshold: 10,\n//     };\n//   }\n//   // on DOM render  display default image\n//   componentDidMount = () => {\n//     window.addEventListener(\"scroll\", this.handleScroll);\n//     this.imageRef.current.src = \"img/01-hero-lightpass/0000.jpg\";\n//     this.props.updateSectionInfo({\n//       sections: [\n//         {\n//           name: \"01-hero-lightpass\",\n//           style: \"white\",\n//           text:\n//             \"Active Noise Cancellation for immersive sound. Transparency mode for hearing what is happening around you.\",\n//         },\n//         { name: \"02-head-bob-turn\", text: \"Arrival of the fittest.\" },\n//         { name: \"03-flip-for-guts\", text: \"Sound that cuts out the noise.\" },\n//         {\n//           name: \"04-explode-tips\",\n//           text:\n//             \"Choose from three sizes of soft, flexible silicone tips that click into place. Find the best fit and get the best sound by using the Ear Tip Fit Test.\",\n//         },\n//         {\n//           name: \"05-flip-for-nc\",\n//           style: \"white\",\n//           text:\n//             \"Enjoy superior sound quality with Adaptive EQ, which automatically tunes music to the shape of your ear for a rich, consistent listening experience.\",\n//         },\n//         { name: \"06-transparency-head\" },\n//         { name: \"07-flip-reveal-guts\", style: \"white\" },\n//         { name: \"08-turn-for-chip\" },\n//         { name: \"09-scoop-turn\", style: \"black\" },\n//         {\n//           name: \"10-fall-into-case\",\n//           style: \"white\",\n//           text: \"Charge wirelessly. Use tirelessly.\",\n//         },\n//       ],\n//     });\n//   };\n//   componentWillUnmount = () => {\n//     window.removeEventListener(\"scroll\", this.handleScroll);\n//   };\n//   //to create file path to be retrieved from Public folder\n//   getImagePath(section, index) {\n//     const i = index / 10;\n//     let fileName = \"\";\n//     if (i >= 1) {\n//       fileName = index > 99 ? `0${index}` : `00${index}`;\n//     } else {\n//       fileName = `000${index}`;\n//     }\n//     return `/img/${section}/${fileName}.jpg`;\n//   }\n//   handleScroll = (e) => {\n//     const scrollThreshold = this.state.scrollThreshold;\n//     let newIndex;\n//     let sTop = window.scrollY; //number of pixels document is currently scrolled vertically\n//     let index = sTop / scrollThreshold;\n//     index = Math.floor(index);\n//     if (index < 148) {\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[0].name,\n//         index\n//       );\n//       this.textChange.current.innerHTML = this.props.sections[0].text; //text for each section\n//     } else if (index >= 148 && index < 280) {\n//       newIndex = index - 148;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[1].name,\n//         newIndex\n//       );\n//       this.textChange.current.innerHTML = this.props.sections[1].text;\n//     } else if (index >= 280 && index < 368) {\n//       newIndex = index - 280;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[2].name,\n//         newIndex\n//       );\n//       this.textChange.current.innerHTML = this.props.sections[2].text;\n//     } else if (index >= 368 && index < 506) {\n//       newIndex = index - 368;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[3].name,\n//         newIndex\n//       );\n//       this.textChange.current.src = this.props.sections[3].text;\n//     } else if (index >= 506 && index < 645) {\n//       newIndex = index - 506;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[4].name,\n//         newIndex\n//       );\n//       this.textChange.current.src = this.props.sections[4].text;\n//     } else if (index >= 645 && index < 821) {\n//       newIndex = index - 645;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[5].name,\n//         newIndex\n//       );\n//     } else if (index >= 821 && index < 889) {\n//       newIndex = index - 821;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[6].name,\n//         newIndex\n//       );\n//     } else if (index >= 889 && index < 978) {\n//       newIndex = index - 889;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[7].name,\n//         newIndex\n//       );\n//       this.textChange.current.innerHTML = \"\"; //this section has no text\n//     } else if (index >= 978 && index < 1212) {\n//       newIndex = index - 978;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[8].name,\n//         newIndex\n//       );\n//     } else {\n//       newIndex = index - 1212;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[9].name,\n//         newIndex\n//       );\n//       this.textChange.current.innerHTML = this.props.sections[9].text;\n//     }\n//   };\n//   render() {\n//     return (\n//       <section>\n//         <div>\n//           <div className=\"div-content\">\n//             <p ref={this.textChange}></p>\n//           </div>\n//           <img className=\"responsive\" ref={this.imageRef} src=\"\"></img>\n//         </div>\n//       </section>\n//     );\n//   }\n// }\n// //select data from store that connected component needs\n// const mapStateToProps = (state) => ({\n//   sections: state.sectionState.sections,\n// });\n// const mapDispatchToProps = (dispatch) => ({\n//   updateSectionInfo: (data) => dispatch(sectionInfo(data)),\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(MainImage);","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/components/MainImage.tsx"],"names":["React","useQuery","gql","SECTION_DETAILS","SectionDetails","loading","error","data","sections","map","name","text"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAIA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAGA,MAAMC,eAAe,GAAGD,GAAK;;;;;;;CAA7B;;AASA,SAASE,cAAT,GAA0B;AACxB,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBN,QAAQ,CAACE,eAAD,CAAvC;AAEA,MAAGE,OAAH,EAAY,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACZ,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAET,SAAOC,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkB,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KACvB;AAAK,IAAA,GAAG,EAAED,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,IADH,QACWC,IADX,CADF,CADK,CAAP;AAOH;;AAED,eAAeP,cAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport sectionInfo from \"../redux/actions/index\";\nimport { graphql } from 'react-apollo'\nimport { useQuery, gql } from '@apollo/client';\n\n\nconst SECTION_DETAILS = gql `\nquery AllSections {\n  sections {\n    name\n    text\n  }\n}\n`\n\nfunction SectionDetails() {\n  const {loading, error, data} = useQuery(SECTION_DETAILS);\n\n  if(loading) return <p>Loading</p>\n  if (error) return <p>Error :(</p>;\n\n    return data.sections.map(({ name, text }) => (\n      <div key={name}>\n        <p>\n          {name}: {text}\n        </p>\n      </div>\n    ));\n}\n\nexport default SectionDetails\n\n\n// class MainImage extends Component {\n//   imageRef: React.RefObject<HTMLImageElement>;\n//   textChange: React.RefObject<HTMLParagraphElement>;\n//   constructor(props) {\n//     super(props);\n//     this.handleScroll = this.handleScroll.bind(this);\n//     this.imageRef = React.createRef();\n//     this.textChange = React.createRef();\n\n//     this.state = {\n//       scrollThreshold: 10,\n//     };\n//   }\n\n//   // on DOM render  display default image\n//   componentDidMount = () => {\n//     window.addEventListener(\"scroll\", this.handleScroll);\n//     this.imageRef.current.src = \"img/01-hero-lightpass/0000.jpg\";\n//     this.props.updateSectionInfo({\n//       sections: [\n//         {\n//           name: \"01-hero-lightpass\",\n//           style: \"white\",\n//           text:\n//             \"Active Noise Cancellation for immersive sound. Transparency mode for hearing what is happening around you.\",\n//         },\n//         { name: \"02-head-bob-turn\", text: \"Arrival of the fittest.\" },\n//         { name: \"03-flip-for-guts\", text: \"Sound that cuts out the noise.\" },\n//         {\n//           name: \"04-explode-tips\",\n//           text:\n//             \"Choose from three sizes of soft, flexible silicone tips that click into place. Find the best fit and get the best sound by using the Ear Tip Fit Test.\",\n//         },\n//         {\n//           name: \"05-flip-for-nc\",\n//           style: \"white\",\n//           text:\n//             \"Enjoy superior sound quality with Adaptive EQ, which automatically tunes music to the shape of your ear for a rich, consistent listening experience.\",\n//         },\n//         { name: \"06-transparency-head\" },\n//         { name: \"07-flip-reveal-guts\", style: \"white\" },\n//         { name: \"08-turn-for-chip\" },\n//         { name: \"09-scoop-turn\", style: \"black\" },\n//         {\n//           name: \"10-fall-into-case\",\n//           style: \"white\",\n//           text: \"Charge wirelessly. Use tirelessly.\",\n//         },\n//       ],\n//     });\n//   };\n\n//   componentWillUnmount = () => {\n//     window.removeEventListener(\"scroll\", this.handleScroll);\n//   };\n\n//   //to create file path to be retrieved from Public folder\n//   getImagePath(section, index) {\n//     const i = index / 10;\n//     let fileName = \"\";\n\n//     if (i >= 1) {\n//       fileName = index > 99 ? `0${index}` : `00${index}`;\n//     } else {\n//       fileName = `000${index}`;\n//     }\n//     return `/img/${section}/${fileName}.jpg`;\n//   }\n\n//   handleScroll = (e) => {\n//     const scrollThreshold = this.state.scrollThreshold;\n//     let newIndex;\n\n//     let sTop = window.scrollY; //number of pixels document is currently scrolled vertically\n//     let index = sTop / scrollThreshold;\n\n//     index = Math.floor(index);\n\n//     if (index < 148) {\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[0].name,\n//         index\n//       );\n//       this.textChange.current.innerHTML = this.props.sections[0].text; //text for each section\n//     } else if (index >= 148 && index < 280) {\n//       newIndex = index - 148;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[1].name,\n//         newIndex\n//       );\n//       this.textChange.current.innerHTML = this.props.sections[1].text;\n//     } else if (index >= 280 && index < 368) {\n//       newIndex = index - 280;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[2].name,\n//         newIndex\n//       );\n//       this.textChange.current.innerHTML = this.props.sections[2].text;\n//     } else if (index >= 368 && index < 506) {\n//       newIndex = index - 368;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[3].name,\n//         newIndex\n//       );\n//       this.textChange.current.src = this.props.sections[3].text;\n//     } else if (index >= 506 && index < 645) {\n//       newIndex = index - 506;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[4].name,\n//         newIndex\n//       );\n//       this.textChange.current.src = this.props.sections[4].text;\n//     } else if (index >= 645 && index < 821) {\n//       newIndex = index - 645;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[5].name,\n//         newIndex\n//       );\n//     } else if (index >= 821 && index < 889) {\n//       newIndex = index - 821;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[6].name,\n//         newIndex\n//       );\n//     } else if (index >= 889 && index < 978) {\n//       newIndex = index - 889;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[7].name,\n//         newIndex\n//       );\n//       this.textChange.current.innerHTML = \"\"; //this section has no text\n//     } else if (index >= 978 && index < 1212) {\n//       newIndex = index - 978;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[8].name,\n//         newIndex\n//       );\n//     } else {\n//       newIndex = index - 1212;\n//       this.imageRef.current.src = this.getImagePath(\n//         this.props.sections[9].name,\n//         newIndex\n//       );\n//       this.textChange.current.innerHTML = this.props.sections[9].text;\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <section>\n//         <div>\n//           <div className=\"div-content\">\n//             <p ref={this.textChange}></p>\n//           </div>\n//           <img className=\"responsive\" ref={this.imageRef} src=\"\"></img>\n//         </div>\n//       </section>\n//     );\n//   }\n// }\n\n// //select data from store that connected component needs\n// const mapStateToProps = (state) => ({\n//   sections: state.sectionState.sections,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   updateSectionInfo: (data) => dispatch(sectionInfo(data)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(MainImage);\n"]},"metadata":{},"sourceType":"module"}