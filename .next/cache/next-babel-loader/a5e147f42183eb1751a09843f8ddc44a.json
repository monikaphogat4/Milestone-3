{"ast":null,"code":"var _jsxFileName = \"/Users/m0p024f/WebstormProjects/Milestone 3/components/Index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"./Layout\";\nimport StickyNav from \"./StickyNav\";\nimport Footer from \"./Footer\";\nimport MainImage from \"./MainImage\";\nimport { Fragment } from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"../redux/store\";\nimport { ApolloClient, InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nconst Apllloclient = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\nconst client = new ApolloClient({\n  uri: \"http://localhost:3000/api/graphql-data\",\n  cache: new InMemoryCache()\n}); //Apollo provider -  enables all child components to access apollo client to send queries and mutations\n\nconst Index = () => {\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), __jsx(StickyNav, {\n    name: \"Airpods Pro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), __jsx(MainImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }), __jsx(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/components/Index.tsx"],"names":["Layout","StickyNav","Footer","MainImage","Fragment","Provider","store","ApolloClient","InMemoryCache","ApolloProvider","Apllloclient","uri","cache","client","Index"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,cAA1C;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,MAAMC,YAAY,GAAG,IAAIH,YAAJ,CAAiB;AACpCI,EAAAA,GAAG,EAAE,uCAD+B;AAEpCC,EAAAA,KAAK,EAAE,IAAIJ,aAAJ;AAF6B,CAAjB,CAArB;AAKA,MAAMK,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BI,EAAAA,GAAG,EAAE,wCADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIJ,aAAJ;AAFuB,CAAjB,CAAf,C,CAKA;;AACA,MAAMM,KAAK,GAAG,MAAM;AAClB,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEP,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD;AAAW,IAAA,IAAI,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,CADA,CADF;AAYD,CAbD;;AAcA,eAAeQ,KAAf","sourcesContent":["import Layout from \"./Layout\";\nimport StickyNav from \"./StickyNav\";\nimport Footer from \"./Footer\";\nimport MainImage from \"./MainImage\";\nimport { Fragment } from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"../redux/store\";\nimport {ApolloClient, InMemoryCache} from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nconst Apllloclient = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:3000/api/graphql-data\",\n  cache: new InMemoryCache()\n});\n\n//Apollo provider -  enables all child components to access apollo client to send queries and mutations\nconst Index = () => {\n  return (\n    <ApolloProvider client={client}> \n    <Provider store={store}>\n      <Fragment>\n        <Layout />\n        <StickyNav name=\"Airpods Pro\" />\n        <MainImage />\n        <Footer />\n      </Fragment>\n    </Provider>\n    </ApolloProvider>\n  );\n};\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}