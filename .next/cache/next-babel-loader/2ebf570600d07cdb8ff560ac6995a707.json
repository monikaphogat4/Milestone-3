{"ast":null,"code":"import { ApolloServer, gql } from \"apollo-server-micro\";\nconst typeDefs = gql`\n  type Section {\n    name: String\n    text: String\n  }\n\n  type Query {\n    sections: [Section]\n  }\n`;\nconst sections = [{\n  name: \"01-hero-lightpass\",\n  text: \"Active Noise Cancellation for immersive sound. Transparency mode for hearing what is happening around you.\"\n}, {\n  name: \"02-head-bob-turn\",\n  text: \"Arrival of the fittest.\"\n}, {\n  name: \"03-flip-for-guts\",\n  text: \"Sound that cuts out the noise.\"\n}, {\n  name: \"04-explode-tips\",\n  text: \"Choose from three sizes of soft, flexible silicone tips that click into place. Find the best fit and get the best sound by using the Ear Tip Fit Test.\"\n}, {\n  name: \"05-flip-for-nc\",\n  text: \"Enjoy superior sound quality with Adaptive EQ, which automatically tunes music to the shape of your ear for a rich, consistent listening experience.\"\n}, {\n  name: \"06-transparency-head\"\n}, {\n  name: \"07-flip-reveal-guts\"\n}, {\n  name: \"08-turn-for-chip\"\n}, {\n  name: \"09-scoop-turn\"\n}, {\n  name: \"10-fall-into-case\",\n  text: \"Charge wirelessly. Use tirelessly.\"\n}];\nconst resolvers = {\n  Query: {\n    sections: () => sections\n  }\n};\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers\n});\nconst handler = server.createHandler({\n  path: \"/api/graphql-data\"\n}); // The `listen` method launches a web server.\n// server.listen().then(({ url }) => {\n//   console.log(`ðŸš€  Server ready at ${url}`);\n// });\n\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":{"version":3,"sources":["/Users/m0p024f/WebstormProjects/Milestone 3/pages/api/graphql-data.js"],"names":["ApolloServer","gql","typeDefs","sections","name","text","resolvers","Query","server","handler","createHandler","path","config","api","bodyParser"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,GAAvB,QAAkC,qBAAlC;AAEA,MAAMC,QAAQ,GAAGD,GAAI;;;;;;;;;CAArB;AAUA,MAAME,QAAQ,GAAG,CACf;AACEC,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,IAAI,EACF;AAHJ,CADe,EAMf;AACED,EAAAA,IAAI,EAAE,kBADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CANe,EAUf;AACED,EAAAA,IAAI,EAAE,kBADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAVe,EAcf;AACED,EAAAA,IAAI,EAAE,iBADR;AAEEC,EAAAA,IAAI,EACF;AAHJ,CAde,EAmBf;AACED,EAAAA,IAAI,EAAE,gBADR;AAEEC,EAAAA,IAAI,EACF;AAHJ,CAnBe,EAwBf;AAAED,EAAAA,IAAI,EAAE;AAAR,CAxBe,EAyBf;AACEA,EAAAA,IAAI,EAAE;AADR,CAzBe,EA4Bf;AACEA,EAAAA,IAAI,EAAE;AADR,CA5Be,EA+Bf;AACEA,EAAAA,IAAI,EAAE;AADR,CA/Be,EAkCf;AACEA,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CAlCe,CAAjB;AAwCA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,QAAQ,EAAE,MAAMA;AADX;AADS,CAAlB;AAMA,MAAMK,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAAEE,EAAAA,QAAF;AAAYI,EAAAA;AAAZ,CAAjB,CAAf;AAEA,MAAMG,OAAO,GAAGD,MAAM,CAACE,aAAP,CAAqB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAArB,CAAhB,C,CACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAKP,eAAeL,OAAf","sourcesContent":["import { ApolloServer, gql } from \"apollo-server-micro\";\n\nconst typeDefs = gql`\n  type Section {\n    name: String\n    text: String\n  }\n\n  type Query {\n    sections: [Section]\n  }\n`;\nconst sections = [\n  {\n    name: \"01-hero-lightpass\",\n    text:\n      \"Active Noise Cancellation for immersive sound. Transparency mode for hearing what is happening around you.\",\n  },\n  {\n    name: \"02-head-bob-turn\",\n    text: \"Arrival of the fittest.\",\n  },\n  {\n    name: \"03-flip-for-guts\",\n    text: \"Sound that cuts out the noise.\",\n  },\n  {\n    name: \"04-explode-tips\",\n    text:\n      \"Choose from three sizes of soft, flexible silicone tips that click into place. Find the best fit and get the best sound by using the Ear Tip Fit Test.\",\n  },\n  {\n    name: \"05-flip-for-nc\",\n    text:\n      \"Enjoy superior sound quality with Adaptive EQ, which automatically tunes music to the shape of your ear for a rich, consistent listening experience.\",\n  },\n  { name: \"06-transparency-head\" },\n  {\n    name: \"07-flip-reveal-guts\",\n  },\n  {\n    name: \"08-turn-for-chip\",\n  },\n  {\n    name: \"09-scoop-turn\",\n  },\n  {\n    name: \"10-fall-into-case\",\n    text: \"Charge wirelessly. Use tirelessly.\",\n  },\n];\n\nconst resolvers = {\n  Query: {\n    sections: () => sections,\n  },\n};\n\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nconst handler = server.createHandler({ path: \"/api/graphql-data\" });\n// The `listen` method launches a web server.\n// server.listen().then(({ url }) => {\n//   console.log(`ðŸš€  Server ready at ${url}`);\n// });\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}